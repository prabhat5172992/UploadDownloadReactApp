{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fileName","fileErr","fileObject","fileList","fileUpload","bind","assertThisInitialized","event","files","toConsumableArray","target","ext","name","split","length","isFileValid","validateFile","setState","update","$push","console","log","value","file","size","react_default","a","createElement","MuiThemeProvider_default","TextField_default","floatingLabelText","style","marginLeft","marginTop","errorText","RaisedButton_default","label","primary","margin","type","width","height","opacity","position","left","top","cursor","zIndex","onChange","data-default-file","map","item","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QA8FeA,cAtFb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CACTC,SAAS,GACTC,QAAS,GACTC,WAAY,GACZC,SAAU,IAEZX,EAAKY,WAAaZ,EAAKY,WAAWC,KAAhBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KARFA,0EAWPe,GACT,IAAIJ,EAAWR,KAAKI,MAAMI,SACpBK,EAAKf,OAAAgB,EAAA,EAAAhB,CAAOc,EAAMG,OAAOF,OACzBG,EAAMH,EAAM,GAAGI,KAAKC,MAAM,KAAKL,EAAM,GAAGI,KAAKC,MAAM,KAAKC,OAAO,GAC/DC,EAAcpB,KAAKqB,aAAaR,EAAM,GAAIG,GAC1CX,EAAWQ,EAAM,GAAGI,KACpBV,EAAaM,EAAM,GACxBO,EACCpB,KAAKsB,SAAS,CACZjB,WACAE,aACAC,SAAUe,IAAOf,EAAU,CAACgB,MAAO,CAACnB,OAEtCL,KAAKsB,SAAS,CAACjB,SAAS,GAAIE,WAAW,OACzCkB,QAAQC,IAAI,mBAAoBb,EAAOO,GACvCR,EAAMG,OAAOY,MAAM,wCAGRC,EAAMZ,GACjB,OAAGY,EAAKC,MAAQ,UACZ7B,KAAKsB,SAAS,CAAChB,QAAS,mCACjB,GAEI,QAANU,GAAqB,QAANA,GAAuB,SAANA,GAAsB,SAANA,GAAwB,QAANA,GAAqB,QAANA,GAAuB,QAANA,GAAqB,QAANA,GACxHhB,KAAKsB,SAAS,CAAChB,QAAS,0BACjB,IAGPN,KAAKsB,SAAS,CAAEhB,QAAQ,MACjB,oCAST,OADAmB,QAAQC,IAAI,WAAY1B,KAAKI,MAAMI,UAEjCsB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,kBAAoB,iBACpBC,MATK,CAACC,WAAY,OAAQC,UAAW,QAUrCX,MAAS3B,KAAKI,MAAMC,SACpBkC,UAAavC,KAAKI,MAAME,UAE1BwB,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEU,MAAM,SACNC,SAAO,EACPN,MAfI,CAAEO,OAAQ,KAiBdb,EAAAC,EAAAC,cAAA,SACEY,KAAK,OACLR,MAAS,CAAES,MAAO,IAAKC,OAAQ,GAAIC,QAAS,EAAGC,SAAU,WAAYC,KAAM,EAAGC,IAAK,EAAGC,OAAQ,UAAWC,OAAQ,KACjHC,SAAYrD,KAAKS,WACjB6C,oBAAkB,GAClB3B,MAAO,SAIbG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACGhC,KAAKI,MAAMI,SAASW,OACnBnB,KAAKI,MAAMI,SAAS+C,IAAI,SAAAC,GAAU,OAAO1B,EAAAC,EAAAC,cAAA,cAAMwB,EAAN,OACzC,gBA/EEC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f011bc27.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport TextField from 'material-ui/TextField';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport update from 'immutability-helper';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      fileName:\"\",\n      fileErr: \"\",\n      fileObject: {},\n      fileList: []\n    }\n    this.fileUpload = this.fileUpload.bind(this);\n  }\n  \n  fileUpload(event){\n    let fileList = this.state.fileList;\n    const files = [...event.target.files];\n    const ext = files[0].name.split('.')[files[0].name.split('.').length-1];\n    const isFileValid = this.validateFile(files[0], ext);\n    const fileName = files[0].name;\n    const fileObject = files[0];\n    (isFileValid) ? \n      this.setState({\n        fileName, \n        fileObject,\n        fileList: update(fileList, {$push: [fileName]}) \n      }) : \n      this.setState({fileName:\"\", fileObject:null});\n    console.log(\"This is the file\", files, isFileValid);\n    event.target.value=\"\";\n  }\n\n  validateFile(file, ext){\n    if(file.size >= 41943040){\n        this.setState({fileErr: \"File size cannot exceed 40mb.\"});\n        return false;\n    }\n    else if((ext!==\"txt\" && ext!==\"TXT\") && (ext!==\"docx\" && ext!==\"DOCX\") && (ext!==\"doc\" && ext!==\"DOC\") && (ext!==\"pdf\" && ext!==\"PDF\")){\n      this.setState({fileErr: \"Fis is not suported.\"});\n      return false;\n    }\n    else{\n      this.setState({ fileErr:\"\"});\n      return true;\n    }\n  }\n  \n\n  render() {\n    const styles = {marginLeft: \"30px\", marginTop: \"10px\"}\n    const style = { margin: 12 }\n    console.log(\"FileList\", this.state.fileList);\n    return (\n      <div>\n        <MuiThemeProvider>\n          <div>\n            <TextField\n              floatingLabelText = \"Upload File...\"\n              style = {styles}\n              value = {this.state.fileName}\n              errorText = {this.state.fileErr}\n            />\n            <RaisedButton \n              label=\"Upload\" \n              primary\n              style={style} \n            >\n              <input \n                type=\"file\" \n                style = {{ width: 100, height: 35, opacity: 0, position: \"absolute\", left: 0, top: 0, cursor: \"pointer\", zIndex: 100}}\n                onChange = {this.fileUpload}\n                data-default-file=\"\"\n                value={null}\n              />\n            </RaisedButton>\n          </div>\n          <div>\n            <ul>\n              {this.state.fileList.length ?\n                this.state.fileList.map(item => { return(<li> {item} </li>)}) :\n                null}\n            </ul>\n          </div>\n        </MuiThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}